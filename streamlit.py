import os

import matplotlib.pyplot as plt
import mlflow
import numpy as np
import pandas as pd
import shap
from sklearn.metrics import auc, precision_recall_curve, roc_auc_score
from streamlit_shap import st_shap

import streamlit as st

os.environ["MLFLOW_S3_ENDPOINT_URL"] = "http://161.35.150.68:9000"
os.environ[
    "AWS_ACCESS_KEY_ID"
] = "6owG9ybVXncQyUFCu7eTEn_mteDf12aAKUgkqLJj76e2V5Yz7NxlVSJnly5dfPH-InWnHdBru062ABgJRU2Z0A"
os.environ[
    "AWS_SECRET_ACCESS_KEY"
] = "Gh85cb1UQ2vWO1AvRl9Dld94gKluLnBnvC-tCfSntBikx_A_dD4G842d7RejjDR6BTH0Ko2qaWidswbjm_at4Q"
os.environ["MLFLOW_TRACKING_URI"] = "http://161.35.150.68:5000"
logged_model = "runs:/e862b46b5e11426eb835ced666235cd4/art"

CAT_COLS = [
    "col520",
    "col552",
    "col543",
    "col527",
    "col607",
    "col600",
    "col599",
    "col560",
    "col548",
    "col551",
    "col535",
    "col540",
    "col464",
    "col152",
    "col228",
    "col559",
    "col460",
    "col472",
    "col568",
    "col468",
    "col2271",
    "col2341",
    "col2427",
    "col2454",
    "col2303",
    "col2583",
    "col2448",
    "col2215",
    "col2456",
    "col2462",
    "col2289",
    "col2327",
    "col2281",
    "col2649",
    "col1956",
    "col2434",
    "col2604",
    "col1824",
    "col1492",
    "col2118",
    "col2280",
    "col346",
    "col2112",
    "col720",
    "col804",
    "col2156",
    "col367",
    "col1470",
    "col2057",
    "col2235",
    "col2158",
    "col2411",
    "col1835",
    "col2034",
    "col2234",
    "col2388",
    "col2165",
    "col2188",
    "col1897",
    "col2021",
    "col2087",
    "col2287",
    "col2446",
    "col2179",
    "col431",
    "col2205",
    "col2589",
    "col691",
    "col896",
    "col2170",
    "col2208",
    "col2556",
    "col2383",
    "col2559",
    "col2405",
    "col2400",
    "col2654",
    "col2485",
    "col2575",
    "col2467",
    "col2551",
    "col2424",
    "col2579",
    "col2646",
    "col2648",
    "col1991",
    "col1945",
    "col1953",
    "col2110",
    "col2350",
    "col479",
    "col2566",
    "col331",
    "col1986",
    "col2362",
    "col751",
    "col2136",
    "col310",
    "col2342",
    "col332",
    "col375",
    "col2151",
    "col2360",
    "col416",
    "col500",
    "col1900",
    "col1987",
    "col2398",
    "col1856",
    "col2058",
    "col2068",
    "col2135",
    "col488",
    "col2190",
    "col2328",
    "col2555",
    "col506",
    "col1827",
    "col392",
    "col2275",
    "col1453",
    "col2232",
    "col2468",
    "col295",
    "col2428",
    "col2171",
    "col2314",
    "col2578",
    "col2581",
    "col2653",
    "col2355",
    "col2451",
    "col2402",
    "col2572",
    "col2351",
    "col2389",
    "col2603",
    "col2643",
    "col2422",
    "col2612",
    "col2661",
    "col1952",
    "col2283",
    "col2012",
    "col2278",
    "col508",
    "col2452",
    "col656",
    "col108",
    "col2302",
    "col299",
    "col2323",
    "col316",
    "col380",
    "col2663",
    "col1966",
    "col336",
    "col2060",
    "col2080",
    "col624",
    "col904",
    "col2370",
    "col2345",
    "col2482",
    "col2433",
    "col2404",
    "col291",
    "col672",
    "col2085",
    "col2353",
    "col2357",
    "col2304",
    "col2218",
    "col2244",
    "col2380",
    "col2206",
    "col2652",
    "col2209",
    "col2204",
    "col2214",
    "col2397",
    "col2379",
    "col2325",
    "col2483",
    "col1834",
    "col2310",
    "col2054",
    "col2408",
    "col823",
    "col2401",
    "col2309",
    "col400",
    "col247",
    "col1948",
    "col2412",
    "col268",
    "col675",
    "col2129",
    "col2432",
    "col2631",
    "col687",
    "col2437",
    "col2324",
    "col415",
    "col2277",
    "col2126",
    "col2276",
    "col2286",
    "col456",
    "col2082",
    "col2228",
    "col2447",
    "col2186",
    "col2292",
    "col2216",
    "col2306",
    "col2436",
    "col2333",
    "col2334",
    "col2419",
    "col2584",
    "col2343",
    "col2354",
    "col2279",
    "col2426",
    "col2211",
    "col2312",
    "col1465",
    "col2172",
    "col2470",
    "col2662",
    "col1988",
    "col2629",
    "col2655",
    "col2157",
    "col440",
    "col2029",
    "col2104",
    "col679",
    "col892",
    "col635",
    "col1862",
    "col2086",
    "col2366",
    "col2637",
    "col379",
    "col739",
    "col2465",
    "col2282",
    "col2453",
    "col2293",
    "col2272",
    "col2382",
    "col2274",
    "col1898",
    "col2298",
    "col490",
    "col623",
    "col2132",
    "col278",
    "col404",
    "col2295",
    "col2418",
    "col2560",
    "col2177",
    "col2558",
    "col2375",
    "col2414",
    "col692",
    "col740",
    "col2329",
    "col287",
    "col2222",
    "col2576",
    "col388",
    "col2429",
    "col2557",
    "col727",
    "col1899",
    "col1974",
    "col2150",
    "col2435",
    "col2365",
    "col2182",
    "col2385",
    "col664",
    "col498",
    "col452",
    "col2294",
    "col2237",
    "col2246",
    "col2317",
    "col2574",
    "col2358",
    "col2377",
    "col2219",
    "col492",
    "col2413",
    "col676",
    "col2660",
    "col2614",
    "col816",
    "col680",
    "col703",
    "col2103",
    "col812",
    "col1859",
    "col256",
    "col2297",
    "col2046",
    "col2053",
    "col423",
    "col2645",
    "col446",
    "col2387",
    "col2552",
    "col2657",
    "col2420",
    "col2464",
    "col2651",
    "col2311",
    "col2390",
    "col2459",
    "col2332",
    "col2152",
    "col1833",
    "col2092",
    "col2608",
    "col272",
    "col956",
    "col1955",
    "col2582",
    "col2407",
    "col439",
    "col1964",
    "col360",
    "col2368",
    "col2361",
    "col2284",
    "col260",
    "col2226",
    "col2363",
    "col2340",
    "col2207",
    "col2220",
    "col2352",
    "col2553",
    "col1464",
    "col1467",
    "col2221",
    "col2371",
    "col1971",
    "col2059",
    "col648",
    "col116",
    "col2079",
    "col286",
    "col348",
    "col683",
    "col696",
    "col1981",
    "col322",
    "col2131",
    "col347",
    "col652",
    "col1838",
    "col1984",
    "col2109",
    "col759",
    "col2356",
    "col2421",
    "col2326",
    "col2031",
    "col292",
    "col266",
    "col2449",
    "col2381",
    "col2469",
    "col2580",
    "col2394",
    "col2563",
    "col2348",
    "col1983",
    "col644",
    "col1996",
    "col2116",
    "col2013",
    "col294",
    "col1826",
    "col2444",
    "col688",
    "col2319",
    "col2588",
    "col2187",
    "col2466",
    "col2308",
    "col2571",
    "col1491",
    "col2339",
    "col2164",
    "col2307",
    "col2011",
    "col104",
    "col376",
    "col2056",
    "col639",
    "col712",
    "col1997",
    "col747",
    "col68",
    "col328",
    "col2372",
    "col2480",
    "col2364",
    "col2299",
    "col2386",
    "col408",
    "col483",
    "col2178",
    "col2347",
    "col2431",
    "col2313",
    "col1950",
    "col1460",
    "col2322",
    "col2425",
    "col383",
    "col2128",
    "col2564",
    "col312",
    "col2630",
    "col2061",
    "col2628",
    "col768",
    "col2105",
    "col2374",
    "col1858",
    "col2033",
    "col427",
    "col2153",
    "col509",
    "col2045",
    "col2213",
    "col2647",
    "col2203",
    "col2296",
    "col1902",
    "col2484",
    "col2006",
    "col2102",
    "col771",
    "col2229",
    "col2430",
    "col651",
    "col2106",
    "col2007",
    "col708",
    "col2180",
    "col2586",
    "col303",
    "col308",
    "col410",
    "col2075",
    "col435",
    "col772",
    "col636",
    "col2315",
    "col2606",
    "col2202",
    "col1970",
    "col2625",
    "col760",
    "col2605",
    "col340",
    "col735",
    "col1946",
    "col323",
    "col475",
    "col398",
    "col2077",
    "col632",
    "col2210",
    "col2330",
    "col2346",
    "col2290",
    "col2199",
    "col2443",
    "col1828",
    "col1490",
    "col2285",
    "col2020",
    "col2140",
    "col485",
    "col707",
    "col2613",
    "col311",
    "col663",
    "col2636",
    "col715",
    "col728",
    "col900",
    "col2396",
    "col2155",
    "col2318",
    "col496",
    "col2460",
    "col2549",
    "col2627",
    "col128",
    "col2125",
    "col2022",
    "col2154",
    "col288",
    "col503",
    "col2577",
    "col2016",
    "col279",
    "col755",
    "col335",
    "col355",
    "col2423",
    "col2384",
    "col2212",
    "col2461",
    "col2417",
    "col2051",
    "col960",
    "col2037",
    "col2069",
    "col384",
    "col2044",
    "col2305",
    "col719",
    "col434",
    "col2028",
    "col2078",
    "col436",
    "col2035",
    "col419",
    "col2403",
    "col2650",
    "col2217",
    "col2587",
    "col2335",
    "col2638",
    "col2301",
    "col356",
    "col344",
    "col1972",
    "col744",
    "col324",
    "col2376",
    "col403",
    "col2457",
    "col2395",
    "col2331",
    "col2442",
    "col2373",
    "col640",
    "col451",
    "col2316",
    "col763",
    "col481",
    "col808",
    "col1982",
    "col1825",
    "col511",
    "col2406",
    "col748",
    "col2399",
    "col1963",
    "col2005",
    "col359",
    "col820",
    "col2359",
    "col271",
    "col2070",
    "col2440",
    "col2644",
    "col764",
    "col2094",
    "col2133",
    "col1926",
    "col2142",
    "col318",
    "col2565",
    "col668",
    "col2238",
    "col399",
    "col732",
    "col412",
    "col2320",
    "col2642",
    "col2561",
    "col1493",
    "col477",
    "col824",
    "col499",
    "col510",
    "col372",
    "col2111",
    "col290",
    "col671",
    "col426",
    "col2169",
    "col1459",
    "col2590",
    "col2101",
    "col368",
    "col220",
    "col704",
    "col2093",
    "col2063",
    "col2562",
    "col2632",
    "col2227",
    "col2300",
    "col2160",
    "col478",
    "col700",
    "col455",
    "col2038",
    "col2336",
    "col2338",
    "col1860",
    "col2147",
    "col2009",
    "col2088",
    "col2378",
    "col2658",
    "col1989",
    "col407",
    "col2027",
    "col2445",
    "col2546",
    "col371",
    "col2159",
    "col2288",
    "col2108",
    "col275",
    "col743",
    "col80",
    "col2410",
    "col2166",
    "col2230",
    "col432",
    "col724",
    "col647",
    "col2438",
    "col366",
    "col411",
    "col2149",
    "col2624",
    "col351",
    "col447",
    "col315",
    "col1832",
    "col1947",
    "col387",
    "col2441",
    "col2439",
    "col2015",
    "col1980",
    "col390",
    "col386",
    "col487",
    "col512",
    "col248",
    "col1958",
    "col2081",
    "col307",
    "col2450",
    "col2185",
    "col2607",
    "col2573",
    "col752",
    "col2130",
    "col2030",
    "col251",
    "col643",
    "col736",
    "col767",
    "col2055",
    "col296",
    "col473",
    "col2117",
    "col84",
    "col815",
    "col1028",
    "col2455",
    "col2656",
    "col1901",
    "col327",
    "col480",
    "col2367",
    "col2273",
    "col2291",
    "col2554",
    "col1990",
    "col1968",
    "col474",
    "col391",
    "col2369",
    "col276",
    "col667",
    "col2409",
    "col2659",
    "col2010",
    "col1857",
    "col2349",
    "col1962",
    "col2127",
    "col302",
    "col491",
    "col1468",
    "col2064",
    "col504",
    "col2201",
    "col1985",
    "col2042",
    "col1992",
    "col2008",
    "col2107",
    "col270",
    "col1462",
    "col2039",
    "col1829",
    "col2134",
    "col2004",
    "col711",
    "col482",
    "col2243",
    "col1969",
    "col489",
    "col928",
    "col1998",
    "col2344",
    "col1494",
    "col1954",
    "col1836",
    "col320",
    "col424",
    "col888",
    "col716",
    "col120",
    "col1830",
    "col1979",
    "col2062",
    "col358",
    "col428",
    "col660",
    "col267",
    "col2084",
    "col406",
    "col442",
    "col2241",
    "col2602",
    "col476",
    "col497",
    "col2036",
    "col505",
    "col2321",
    "col112",
    "col343",
    "col723",
    "col659",
    "col280",
    "col443",
    "col501",
    "col2337",
    "col1458",
    "col2002",
    "col76",
    "col756",
    "col684",
    "col420",
    "col1466",
    "col246",
    "col444",
    "col655",
    "col430",
    "col507",
    "col2601",
    "col2032",
    "col382",
    "col300",
    "col1924",
    "col2463",
    "col2550",
    "col2083",
    "col2019",
    "col807",
    "col326",
    "col352",
    "col450",
    "col495",
    "col319",
    "col2570",
    "col1896",
    "col448",
    "col438",
    "col731",
    "col2240",
    "col395",
    "col1993",
    "col1861",
    "col699",
    "col306",
    "col342",
    "col2076",
    "col1973",
    "col2458",
    "col1488",
    "col952",
    "col454",
    "col944",
    "col486",
    "col2481",
    "col695",
    "col2141",
    "col314",
    "col339",
    "col2548",
    "col396",
    "col502",
    "col628",
    "col631",
    "col2547",
    "col2200",
    "col2231",
    "col1461",
    "col298",
    "col619",
    "col250",
    "col334",
    "col2050",
    "col2585",
    "col1978",
    "col2416",
    "col627",
    "col304",
    "col932",
    "col940",
    "col252",
    "col2014",
    "col2026",
    "col1837",
    "col422",
    "col620",
    "col394",
    "col2415",
    "col2091",
    "col964",
    "col2168",
    "col2600",
    "col2040",
    "col274",
    "col2003",
    "col2146",
    "col1469",
    "col330",
    "col936",
    "col255",
    "col1457",
    "col282",
    "col2074",
    "col2393",
    "col2043",
    "col350",
    "col948",
    "col354",
    "col283",
    "col258",
    "col374",
    "col1489",
    "col2090",
    "col2018",
    "col2626",
    "col418",
    "col338",
    "col1995",
    "col2052",
    "col370",
    "col1831",
    "col2017",
    "col2242",
    "col2392",
    "col1957",
    "col402",
    "col2391",
    "col2089",
    "col2041",
    "col1456",
    "col414",
    "col1949",
    "col1994",
    "col2148",
    "col1855",
    "col1944",
]


@st.cache_resource
def loaded_model(uri):
    return mlflow.sklearn.load_model(uri)


@st.cache_resource
def full_data():
    return pd.read_parquet("full.parquet")


def plot_pr_curve(test_y, predictions):
    precision, recall, _ = precision_recall_curve(test_y, predictions)
    fig, ax = plt.subplots()
    ax.plot(recall, precision, marker=".", label="catboost")
    ax.set_xlabel("Recall")
    ax.set_ylabel("Precision")
    ax.legend()
    st.pyplot(fig)


def plot_target_segment(test_y, predictions):
    hist_df = pd.DataFrame({"target": test_y.values, "proba": predictions})
    hist_df = hist_df.sort_values(by="proba", ascending=False)

    num_segments = 20
    segment_length = len(hist_df) // num_segments
    array_21 = [21] * (len(hist_df) - num_segments * segment_length)
    hist_df["segment"] = (
        list(np.repeat(range(1, num_segments + 1), segment_length)) + array_21
    )

    hist_df = hist_df.groupby("segment")["target"].sum()
    fig, ax = plt.subplots()
    ax.set_xlabel("Сегмент")
    ax.set_ylabel("Количество контрактов")
    ax.bar(list(hist_df.index), list(hist_df.values))
    st.pyplot(fig)


@st.cache_data
def calc_prediction_full():
    df = full_data()
    last_3m = sorted(df["report_date"].unique())[-3:]

    test_df = (
        df[df["report_date"].isin(last_3m)]
        .reset_index()
        .drop(columns=["index"])
        .drop(["report_date", "client_id"], axis=1)
    )

    predictions = model.predict_proba(test_df.drop(["target"], axis=1))[:, 1]
    return test_df, predictions


def plot_for_full():
    df = full_data()
    last_3m = sorted(df["report_date"].unique())[-3:]

    test_df = (
        df[df["report_date"].isin(last_3m)]
        .reset_index()
        .drop(columns=["index"])
        .drop(["report_date", "client_id"], axis=1)
    )

    predictions = model.predict_proba(test_df.drop(["target"], axis=1))[:, 1]

    plot_pr_curve(test_df["target"], predictions)
    plot_target_segment(test_df["target"], predictions)


def plot_for_test(model, df):
    df[df.select_dtypes("object").columns] = df[
        df.select_dtypes("object").columns
    ].astype(str)
    df = df[CAT_COLS]
    plt.cla()
    shap_values = shap.TreeExplainer(model).shap_values(df)
    st_shap(shap.summary_plot(shap_values, df))


@st.cache_data
def calc_prediction_test(df):
    client_id = df["client_id"]
    report_date = df["report_date"]

    df[df.select_dtypes("object").columns] = df[
        df.select_dtypes("object").columns
    ].astype(str)
    predictions = model.predict_proba(df[CAT_COLS])[:, 1]

    result = pd.DataFrame()
    result["client_id"] = client_id
    result["report_date"] = report_date
    result["prediction"] = predictions
    return result.sort_values("prediction", ascending=False).to_html()


def calc_metrics(df):
    return 0.92, 0.20532447507639584
    predictions = model.predict_proba(df.drop(["target"], axis=1))[:, 1]
    precision, recall, _ = precision_recall_curve(df["target"], predictions)
    return (auc(recall, precision)), (roc_auc_score(df["target"], predictions))


def show_prediction(df):
    st.write(calc_prediction_test(df), unsafe_allow_html=True)


model = loaded_model(logged_model)
uploaded_file = st.file_uploader("Выберите файл")

if uploaded_file is not None:
    test_df = pd.read_csv(uploaded_file)

    roc, pr = calc_metrics(full_data())

    st.text(f"roc_auc: {roc}")
    st.text(f"pr_auc: {pr}")

    tab1, tab2, tab3, tab4 = st.tabs(
        [
            "Итоговая таблица",
            "Кривая precision recall",
            "Ранжирование клиентов",
            "Важность признаков",
        ]
    )
    full_df, predictions_full = calc_prediction_full()

    with tab1:
        show_prediction(test_df)

    with tab2:
        plot_pr_curve(full_df["target"], predictions_full)

    with tab3:
        plot_target_segment(full_df["target"], predictions_full)

    with tab4:
        plot_for_test(model, test_df)
